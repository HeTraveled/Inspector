package com.home.controller;

import java.io.File;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import springfox.documentation.annotations.ApiIgnore;

import com.dept.model.Dept;
import com.dept.service.DeptService;
import com.home.model.User;
import com.home.service.RoleService;
import com.home.service.UserService;
import com.util.CompressPicDemo;
import com.util.FilterRules;
import com.util.Log;
import com.util.MD5;
import com.util.json.Json;
import com.util.page.DataGrid;
import com.util.page.PagedResult;

@Controller
@Scope("singleton")
@ApiIgnore
@RequestMapping("user")
public class UserController {
	@Autowired
	private UserService userService;
	@Autowired
	private RoleService roleService;
	@Autowired
	private DeptService deptService;
	
	/*
	 * 账号列表
	 */
	
	@RequestMapping("userList")
	@ResponseBody
	public DataGrid userList(@RequestParam(value = "filterRules", required = false) String filterRules,
			@RequestParam(value = "sort", required = false) String sort,
			@RequestParam(value = "order", required = false) String order,
			@RequestParam(value="page",required=false) Integer page,
			@RequestParam(value="rows",required=false) Integer rows,HttpServletRequest request){
		try {
			List<FilterRules> frs = new ArrayList<FilterRules>();
			if (filterRules != null) {
				JSONArray json = JSONArray.fromObject(filterRules);
				if (json.size() > 0) {
					for (int i = 0; i < json.size(); i++) {
						JSONObject job = json.getJSONObject(i);
						frs.add(new FilterRules((String) job.get("field"),
								(String) job.get("op"), (String) job.get("value")));
					}
				}
			}
			User u=new User();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			for (int i = 0; i < frs.size(); i++) {
				FilterRules fr = frs.get(i);
					if (fr.getField().equals("uid"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setUid(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("phone"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setPhone(fr.getValue());
					if (fr.getField().equals("name"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setName(fr.getValue());
					if (fr.getField().equals("wechat"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setWechat(fr.getValue());
					if (fr.getField().equals("rname"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setRname(fr.getValue());
					if (fr.getField().equals("employeeNo"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setEmployeeNo(fr.getValue());
					if (fr.getField().equals("departmentname"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setDepartmentname(fr.getValue());
					if (fr.getField().equals("createTime"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setCreateTime(sdf.parse(fr.getValue()));
					if (fr.getField().equals("birth"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setBirth(sdf.parse(fr.getValue()));
					if (fr.getField().equals("sex"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setSex(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("state"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setState(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("workState"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setWorkState(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("special1"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setSpecial1(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("special2"))
						if (fr.getValue() != null && !fr.getValue().equals(""))
							u.setSpecial2(Integer.parseInt(fr.getValue()));
					if (fr.getField().equals("score")) {
						if (fr.getValue() != null && !fr.getValue().equals("")) {
							if (fr.getOp().equals("equal"))
								u.setNumflag(1);
							else if (fr.getOp().equals("lessorequal"))
								u.setNumflag(2);
							else if (fr.getOp().equals("greaterorequal"))
								u.setNumflag(3);
							u.setScore(new BigDecimal(fr.getValue()));
						}
					}
			}
			if (sort != null) {
				String[] newsort = sort.split(",");
				String[] neworder = order.split(",");
				StringBuffer sb = new StringBuffer();
				for (int i = 0; i < newsort.length; i++) {
					if (i == 0)
						sb.append(" order by ");
					if (newsort[i].equals("uid"))
						newsort[i] = "uid";
					if (newsort[i].equals("phone"))
						newsort[i] = "phone";
					if (newsort[i].equals("name"))
						newsort[i] = "name";
					if (newsort[i].equals("wechat"))
						newsort[i] = "wechat";
					if (newsort[i].equals("createTime"))
						newsort[i] = "create_time";
					if (newsort[i].equals("sex"))
						newsort[i] = "sex";
					if (newsort[i].equals("birth"))
						newsort[i] = "birth";
					if (newsort[i].equals("workState"))
						newsort[i] = "work_state";
					if (newsort[i].equals("state")) 
						newsort[i] = "state";
					if (newsort[i].equals("score"))
						newsort[i] = "score";
					if (newsort[i].equals("special1"))
						newsort[i] = "special1";
					if (newsort[i].equals("special2"))
						newsort[i] = "special2";
					if (newsort[i].equals("employeeNo"))
						newsort[i] = "employee_no";
					if (newsort[i].equals("departmentname")) {
						newsort[i] = "departmentname";
						if (i == 0)
							sb.append("d." + newsort[i] + " " + neworder[i]);
						else
							sb.append(",d." + newsort[i] + " " + neworder[i]);
					} 
					else if (newsort[i].equals("rname")) {
						newsort[i] = "name";
						if (i == 0)
							sb.append("r." + newsort[i] + " " + neworder[i]);
						else
							sb.append(",r." + newsort[i] + " " + neworder[i]);
					}
					else {
						if (i == 0)
							sb.append("u." + newsort[i] + " " + neworder[i]);
						else
							sb.append(",u." + newsort[i] + " " + neworder[i]);
					}
				}
				u.setOrderby(sb.toString());
				}else
					u.setOrderby("order by u.state desc,u.create_time desc");
			DataGrid datagrid=DataGrid.init();
			PagedResult<User> pagedResult=userService.display(u,page,rows);
				 datagrid.setTotal(pagedResult.getTotal());
				 datagrid.setRows(pagedResult.getDataList());
			 	return datagrid;
		} catch (Exception e) {
			Log.getLogger().error(e.getMessage(), e);
			return null;
		}
	}
	
	
	@RequestMapping(value="data")
	public ModelAndView data(HttpServletRequest request){
		return new ModelAndView("user/user");
	}
	/**
	 * 账号待审核列表
	 */
	@RequestMapping("userVerify")
	public ModelAndView userVerify(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("user/userVerify");
		return mv;
	}
	/**
	 * 账号审核页
	 */
	@RequestMapping("verifyPage")
	public ModelAndView verifyPage(@RequestParam("uid") Integer[] uid,HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("uid", uid);
		mv.setViewName("user/verify");
		return mv;
	}
	/**
	 * 账号审核
	 */
	@RequestMapping(value="updateverify",method = RequestMethod.POST)
	@ResponseBody
	public Json updateverify(@RequestParam("uid") Integer[] uid,@RequestParam("state") Integer state,
			HttpServletRequest request){
		try {
			if(state==0){
				if(userService.updateverifyNo(uid)!=0){
					return new Json(200,"操作成功！",null);
				}else return new Json(201,"操作失败！",null);
			}else{
				if(userService.updateverifyYes(uid)!=0){
					return new Json(200,"操作成功！",null);
				}else return new Json(201,"操作失败！",null);
			}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 账号创建页
	 */
	@RequestMapping("createUserPage")
	public ModelAndView createUserPage(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("role", roleService.display());
		List<Dept> depts=deptService.all();
		if(depts!=null&&depts.size()!=0){
			for(int i=0;i<depts.size();i++){
				Dept d=depts.get(i);
				if(d.getDepartmentname().equals("集团本部")||d.getDepartmentname().equals("子公司")||d.getDepartmentname().equals("未设置"))depts.remove(i);
			}
		}
		mv.addObject("dept", depts);
		mv.setViewName("user/create");
		return mv;
	}
	/**
	 * 账号创建
	 */
	@RequestMapping("createUser")
	@ResponseBody
	public Json createUser(@RequestBody User user,HttpServletRequest request){
		try {
		//判断是否存在相同手机号或员工编号
			if(userService.selectphoneSum(user.getPhone(),user.getEmployeeNo())==0){
			user.setPassword(new MD5().getMD5ofStr(URLDecoder.decode(user.getPassword(),"utf-8")));//密码加密
			user.setState(2);//账号审核中
			Date date=new Date();
			date.setHours(0);
			date.setMinutes(0);
			date.setSeconds(0);
			user.setCreateTime(date);//创建时间
		//	user.setSex(0);//默认性别
		//	user.setDid(10086);//默认部署为10086
			user.setWorkState(1);//工作状态 
			user.setSpecial1(0);//特殊权限1
			user.setSpecial2(0);//特殊权限2
			user.setPrompt(1);//默认消息提醒
			if(user.getName()==null||user.getName().equals(""))user.setName("未设置");//默认昵称
			if(userService.create(user)==1)
				return new Json(200,"操作成功！",null);
			else return new Json(201,"操作失败！",null);
				}else return new Json(202,"该手机号或员工编号已存在！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 账号修改页
	 */
	@RequestMapping("updateUserPage")
	public ModelAndView updateUserPage(@RequestParam("uid") Integer uid,
			HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		User use=userService.selectuid(uid);
		mv.addObject("use", use);
		List<Dept> depts=deptService.all();
		if(depts!=null&&depts.size()!=0){
			for(int i=0;i<depts.size();i++){
				Dept d=depts.get(i);
				if(d.getDepartmentname().equals("集团本部")||d.getDepartmentname().equals("子公司")||d.getDepartmentname().equals("未设置"))depts.remove(i);
			}
		}
		mv.addObject("dept", depts);
		mv.addObject("role", roleService.display());
		mv.setViewName("user/update");
		return mv;
	}
	/**
	 * 账号修改
	 */
	@RequestMapping("updateUser")
	@ResponseBody
	public Json updateUser(@RequestBody User user,HttpServletRequest request){
		try {
			//至少保留一个督查员
			if(user.getRid()!=1){
				User sesuser=(User) request.getSession().getAttribute("user");
				if(sesuser.getRid()==1){
				if(userService.selectridSum()==1)return new Json(202,"至少保留一位督查员身份！",null);
				}
			}
			if(user.getPassword().equals("888888"))user.setPassword(new MD5().getMD5ofStr(URLDecoder.decode(user.getPassword(),"utf-8")));
			else user.setPassword(null);
			User olduser=userService.selectuid(user.getUid());
			if(olduser.getPhone().equals(user.getPhone())&&olduser.getEmployeeNo().equals(user.getEmployeeNo())){
				if(userService.update(user)==1){
					return new Json(200,"操作成功！",null);
				}
				else {
					return new Json(201,"操作失败！",null);
				}
			}else{
			if(userService.selectphoneSum(user.getPhone(),user.getEmployeeNo())==0){
			if(userService.update(user)==1){
				return new Json(200,"操作成功！",null);
			}
			else {
				return new Json(201,"操作失败！",null);
			}
			}else return new Json(202,"该手机号或员工编号已存在！",null);
			}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 账号消息提醒
	 */
	@RequestMapping("updatePrompt")
	@ResponseBody
	public Json updatePrompt(@RequestParam("uid") Integer uid,HttpServletRequest request){
		try {
			if(userService.updatePrompt(uid)==1)
				return new Json(200,"操作成功！",null);
			else return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 删除账号
	 */
	@RequestMapping("delUser")
	@ResponseBody
	public Json delUser(@RequestParam("uid") Integer uid,
			HttpServletRequest request){
		try {
			//至少保留一个督查员
			if(userService.selectuid(uid).getRid()==1){
				if(userService.selectridSum()==1)return new Json(202,"至少保留一位督查员身份！",null);
			}
			//判断该账号是否是部门负责人
			if(deptService.countPri(uid)>0)return new Json(202,"该账号为部门负责人,请修改之后再进行删除！",null);
			//判断该账号是否为主管领导
			if(deptService.countLead(uid)>0)return new Json(202,"该账号为部门分管领导,请修改之后再进行删除！",null);
				if(userService.delete(uid)==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);
		         return new Json(500,null,null);
		}
	}
	/**
	 * 禁（启）用账号
	 */
	@RequestMapping("closeUser")
	@ResponseBody
	public Json closeUser(@RequestParam("uid") Integer uid,
			@RequestParam("state") Integer state,HttpServletRequest request){
		try {
			//至少保留一个督查员
			if(userService.selectuid(uid).getRid()==1){
				if(userService.selectridSum()==1)return new Json(202,"至少保留一位督查员身份！",null);
			}
			if(state==1){
				//禁用该账号
				if(userService.close(uid)==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}else{
				//启用该账号
				if(userService.start(uid)==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 禁（启）用特殊权限1
	 */
	@RequestMapping("updateSpecial1")
	@ResponseBody
	public Json updateSpecial1(@RequestParam("uid") Integer uid,
			@RequestParam("special1") Integer special1,HttpServletRequest request){
		try {
			if(special1==null){
					//启用
				if(userService.update(new User(uid,1))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}else{
			if(special1==1){
				//禁用该账号
				if(userService.update(new User(uid,0))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}else{
				//启用该账号
				if(userService.update(new User(uid,1))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}
			}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 禁（启）用特殊权限2
	 */
	@RequestMapping("updateSpecial2")
	@ResponseBody
	public Json updateSpecial2(@RequestParam("uid") Integer uid,
			@RequestParam("special2") Integer special2,HttpServletRequest request){
		try {
			if(special2==null){
					//启用
				if(userService.update(new User(uid,1,""))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}else{
			if(special2==1){
				//禁用该账号
				if(userService.update(new User(uid,0,""))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}else{
				//启用该账号
				if(userService.update(new User(uid,1,""))==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
			}
			}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 头像上传
	 */
 @RequestMapping(value="headImg",method = RequestMethod.POST)  
 public void headImg(@RequestParam(value = "file", required = false) MultipartFile file,
		 HttpServletRequest request,HttpServletResponse response) throws Exception {  
		response.setHeader("Content-Type", "text/html;charset=UTF-8");
		PrintWriter writer = response.getWriter();
     String path = request.getSession().getServletContext().getRealPath("/");
     path=path.substring(0, path.indexOf("webapps"));
     String fileName = file.getOriginalFilename();
     String fileNameStr = (new Date().getTime())+"__"+fileName;
     File targetFile = new File(path+"webapps/InspectorImgs/headImg", fileNameStr);  
     if(!targetFile.exists()){  
         targetFile.mkdirs();  
     }
     //保存  
     try {  
         file.transferTo(targetFile);
         //等比例压缩
         CompressPicDemo.getCompressPicDemo().compressPic(targetFile, 150.0, 150.0);
     } catch (Exception e) {  
         Log.getLogger().error(e.getMessage(),e);  
     }
     writer.print("InspectorImgs/headImg/"+fileNameStr);
		writer.flush();
		writer.close();
 }
}