package com.sys.controller;


import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.dept.model.Dept;
import com.home.model.User;
import com.inspector.model.Inspector;
import com.sys.model.Horn;
import com.sys.service.HornService;
import com.util.Log;
import com.util.json.Json;
import com.util.page.DataGrid;
import com.util.page.PagedResult;

import springfox.documentation.annotations.ApiIgnore;


@Controller
@Scope("prototype")
@ApiIgnore
@RequestMapping("horn")
public class HornController {
	
	@Autowired
	private HornService hornService;
	
	/*
	 * 小喇叭列表
	 */
	
	@RequestMapping("hornList")
	@ResponseBody
	public DataGrid hornList(@RequestParam(value="page",required=false) Integer page,
			@RequestParam(value="rows",required=false) Integer rows,HttpServletRequest request){
		try {
			DataGrid datagrid=new DataGrid();
			User user=(User) request.getSession().getAttribute("user");
			Horn horn=new Horn();
			if(user.getRid()==1)horn.setState(null);
			else horn.setState(1);
			PagedResult<Horn> pagedResult=hornService.display(horn,page,rows);
				 datagrid.setTotal(pagedResult.getTotal());
				 datagrid.setRows(pagedResult.getDataList());
			 	return datagrid;
		} catch (Exception e) {
			Log.getLogger().error(e.getMessage(), e);
			return null;
		}
	}
	
	/*
	 * 小喇叭入口
	 */
	@RequestMapping(value="data")
	public ModelAndView data(HttpServletRequest request){
		User user=(User) request.getSession().getAttribute("user");
		ModelAndView mv=new ModelAndView();
		mv.addObject("role", user.getRid());
		mv.setViewName("sys/horn");
		return mv;
	}
	/**
	 * 详情页
	 */
	@RequestMapping("hornDetails")
	public ModelAndView hornDetails(@RequestParam("id") Integer id,
			HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("horn",hornService.selectid(id));
		mv.setViewName("sys/hornDetails");
		return mv;
	}
	/**
	 * 创建页
	 */
	@RequestMapping("createHornPage")
	public ModelAndView createHornPage(HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.setViewName("sys/createHorn");
		return mv;
	}
	/**
	 * 创建
	 */
	@RequestMapping("createHorn")
	@ResponseBody
	public Json createHorn(@RequestBody Horn horn,HttpServletRequest request){
		try {
			User user=(User)request.getSession().getAttribute("user");
			horn.setCreateBy(user.getName());
			horn.setCreateTime(new Date());
			if(hornService.create(horn)==1)
				return new Json(200,"操作成功！",null);
			else return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 修改页
	 */
	@RequestMapping("updateHornPage")
	public ModelAndView updateHornPage(@RequestParam("id") Integer id,
			HttpServletRequest request) {
		ModelAndView mv = new ModelAndView();
		mv.addObject("horn",hornService.selectid(id));
		mv.setViewName("sys/updateHorn");
		return mv;
	}
	/**
	 * 修改
	 */
	@RequestMapping("updateHorn")
	@ResponseBody
	public Json updateHorn(@RequestBody Horn horn,HttpServletRequest request){
		try {
			if(hornService.update(horn)==1)
				return new Json(200,"操作成功！",null);
			else return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		         return new Json(500,null,null);
		}
	}
	/**
	 * 删除
	 */
	@RequestMapping("delete")
	@ResponseBody
	public Json delete(@RequestParam("id") Integer id,HttpServletRequest request){
		try {
				if(hornService.delete(id)==1){
					return new Json(200,"操作成功！",null);
				}else
					return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);
		         return new Json(500,null,null);
		}
	}
	/**
	 * 删除多项
	 */
	@RequestMapping(value="deletes",method = RequestMethod.POST)
	@ResponseBody
	public Json deletes(@RequestBody List<Integer> id,HttpServletRequest request){
		try {
			if(hornService.deletes(id)!=0){
				return new Json(200,"操作成功！",null);
			}else return new Json(201,"操作失败！",null);
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);
		         return new Json(500,null,null);
		}
	}
}