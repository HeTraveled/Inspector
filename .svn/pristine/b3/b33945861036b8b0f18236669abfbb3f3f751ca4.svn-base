package com.home.controller;





import java.io.File;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import springfox.documentation.annotations.ApiIgnore;



import com.dept.model.Dept;
import com.dept.service.DeptService;
import com.home.model.Announcement;
import com.home.model.AnnouncementState;
import com.home.model.User;
import com.home.service.AnnouncementServer;
import com.home.service.AnnouncementStateService;
import com.home.service.UserService;
import com.inspector.model.AssistDeptTree;
import com.schedule.model.Schedule;
import com.schedule.model.ScheduleRemind;

import com.schedule.service.ScheduleService;
import com.sys.model.Attachments;
import com.sys.model.MessageRemind;
import com.sys.model.Messages;
import com.sys.service.AttachmentsService;
import com.sys.service.MessageRemindService;
import com.sys.service.MessagesService;
import com.util.FilterRules;
import com.util.HTMLSpirit;
import com.util.Log;
import com.util.json.Json;
import com.util.page.DataGrid;
import com.util.page.PagedResult;
import com.wechat.controller.WechatController;

@Controller
@RequestMapping("Annc")
public class AnnouncementController {
	
	
	@Autowired
	private AnnouncementServer announcementService;
	@Autowired
	private DeptService deptService;
	@Autowired
	private UserService userService;
	@Autowired
	private ScheduleService scheduleService;
	@Autowired
	private AttachmentsService attachmentsService;
	@Autowired
	private AnnouncementStateService announcementStateService;
	@Autowired
	private MessagesService messagesService;
	@Autowired
	private MessageRemindService messageRemindService;
	/*
	 * 跳转公告列表
	 */
	@RequestMapping("skip")
	public ModelAndView skip(@RequestParam(value="state",required=false) Integer state,HttpServletRequest request){
		ModelAndView mv=new ModelAndView();
		mv.addObject("state", state);
		User user=(User)request.getSession().getAttribute("user");
		mv.addObject("role",user.getRid());
		mv.addObject("user",user.getName());
		mv.addObject("uid",user.getUid());
		mv.setViewName("Annc/annclist");
		return mv;
	}
	/*
	 * 跳转公告新建页面
	 */
	@RequestMapping("skip2")
	public ModelAndView skip2(HttpServletRequest request){
		ModelAndView mv=new ModelAndView();
		User user=(User)request.getSession().getAttribute("user");
		mv.addObject("user",user.getRid());
		mv.addObject("dept", deptService.selectall());
		
		User user2=userService.selectuid(user.getUid());
		if(user2.getSpecial1()==1)mv.addObject("Special1",1);
		if(user2.getSpecial2()==1)mv.addObject("Special2",1);
		mv.addObject("uid",user.getUid());
		
		mv.setViewName("Annc/creat");
		return mv;
	}
	/*
	 * 跳转更新页面
	 */
	@RequestMapping("updateAnncPage")
	public ModelAndView updateAnncPage(int id,HttpServletRequest request){
		ModelAndView mv=new ModelAndView();
		mv.addObject("annc", announcementService.selectByPrimaryKey(id));
		User user=(User)request.getSession().getAttribute("user");
		mv.addObject("user",user.getRid());
		User user2=userService.selectuid(user.getUid());
		if(user2.getSpecial1()==1)mv.addObject("Special1",1);
		if(user2.getSpecial2()==1)mv.addObject("Special2",1);
		mv.addObject("uid",user.getUid());
		mv.setViewName("Annc/update");
		return mv;
	}
	/*
	 * 跳转个人待办
	 */
	@RequestMapping("accomplishskip")
	public ModelAndView anncomplishskip(){
		ModelAndView mv=new ModelAndView();
		mv.setViewName("Annc/backlog");
		return mv;
	}
	/*
	 * 更新公告
	 */
	@RequestMapping(value="updateAnnc",method=RequestMethod.POST)
	@ResponseBody
	public Json update(@RequestBody Announcement announcement){
		try{
		Announcement announcement1 =announcementService.selectByPrimaryKey(announcement.getId());
		if(announcement1!=null){
			if(announcement.getRange()!=null){
				//取出字符串赋值R，Range字符串以逗号分隔
				String R=announcement.getRange();
				//清空Range的内容
				announcement.setRange(null);
				//R内容以逗号分隔放进数组
				  String []a=R.split(",");
				String b = "";
				//遍历数组，小于6位的赋值给b，b为拼接后字符串
				  for(int i=0;i<a.length;i++){
					  String aa=a[i];
					  if(aa.length()<6){
						 String range=aa;
						 if(aa.length()>1){
							 b=b+range+",";
						 }
						 b=b+range;
					  }
					  announcement.setRange(b);
				  }
				}
				if(announcement.getInvitation()!=null){
				  String I=announcement.getInvitation();
				  announcement.setInvitation(null);
				  String []ii=I.split(",");
				  String c="";
				  for(int k=0;k<ii.length;k++){
					  String iii=ii[k];
					  if(iii.length()<6){
						  String invi=iii;
						  if(iii.length()>1){
							  c=c+invi+",";
						  }
							 c=c+invi;
					  }
					
					  announcement.setInvitation(c);
				  }
				} 
			int i=announcementService.updateAnnc(announcement);
			if(i==1){
				return new Json(200,"更新成功",null);
			}else{
				return new Json(201,"更新失败",null);
			}
		}else{
			return new Json(201,"更新失败",null);
		}
		}catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		      return new Json(500,null,null);
		}
		
	}
	/*
	 * 新建公告
	 */
	@RequestMapping(value="createAnnc",method=RequestMethod.POST)
	@ResponseBody
	public Json save(@RequestBody Announcement announcement,HttpServletRequest request){
		try {
			User user=(User) request.getSession().getAttribute("user");
			announcement.setCreateBy(user.getName());
			announcement.setDate(new Date());
			announcement.setRemove(0);
			announcement.setUid(user.getUid());
			announcement.setReadstate(0);
			if(announcement.getState()==true){
				announcement.setAccomplish(0);
			}else{
				announcement.setAccomplish(2);
			}
			if(announcement.getRange()!=null){
			//取出字符串赋值R，Range字符串以逗号分隔
			String R=announcement.getRange();
			//清空Range的内容
			announcement.setRange(null);
			//R内容以逗号分隔放进数组
			  String []a=R.split(",");
			  String b ="";
			//遍历数组，小于6位的赋值给b，b为拼接后字符串
			  for(int i=0;i<a.length;i++){
				  String aa=a[i];
				  //差
				  int length=a.length-i;
				  //如果只剩下一个了，不加逗号
				  if(aa.length()<6){
				  if(length>1){
					  String range=aa;
						 b=b+range+",";
					 }
				  if(length<=1){
					  String range=aa;
					 b=b+range;
					}
			  }
				 announcement.setRange(b);
			  }
			}else{
				announcement.setRange(String.valueOf(user.getUid()));
			};
			Integer a=announcementService.save(announcement);
			if(a!=null){
				//上传文件
				if(announcement.getFiles().length!=0){
					List<Attachments> attachments=new ArrayList<Attachments>();
					for(int i=0;i<announcement.getFiles().length;i++)attachments.add(new Attachments(2,a,announcement.getFiles()[i]));
					//上传附件
					attachmentsService.creates(attachments);
				}
				 String ann=announcement.getRange();
				 String []aann=ann.split(",");
				 //协同办件副表
				 	List<AnnouncementState> anncstate=new ArrayList<AnnouncementState>();
						for(int k=0;k<aann.length;k++){
						AnnouncementState announcementState=new AnnouncementState();
						announcementState.setAid(a);
						announcementState.setUid(Integer.parseInt(aann[k]));
						announcementState.setState(0);
						announcementState.setReadstate(0);
						anncstate.add(announcementState);
						User u = userService.selectuid(Integer.parseInt(aann[k]));
						if (u.getWechat() != null
								&& !u.getWechat().equals("")) {
							WechatController.sendAnnc(announcement.getTitle(),
									HTMLSpirit.delHTMLTag(announcement.getText())
											.replaceAll("&nbsp;", " "),
									"进行中", null, u.getWechat().trim(),a);
						}
						}
						announcementStateService.createList(anncstate);
						//添加日程
						if(announcement.getState().equals(true)){
					for(int n=0;n<announcement.getSchedule().size();n++){
					List<Schedule> shcedulelist=new ArrayList<Schedule>();
					for(int k=0;k<aann.length;k++){
					Schedule schedule=new Schedule();
					schedule.setBody(announcement.getSchedule().get(n).getBody());
					schedule.setStartTime(announcement.getSchedule().get(n).getStartTime());
					schedule.setEndTime(announcement.getSchedule().get(n).getEndTime());
					schedule.setSource(2);
					schedule.setAid(a);
					schedule.setUid(Integer.parseInt(aann[k]));
					shcedulelist.add(schedule);
					}
					scheduleService.creatlist(shcedulelist);
				}
					}	
				creatleaveamessage(a,request);
		return new Json(a,"发布成功",null);
		}else{ 
			return new Json(0,"发布失败",null);
		}
		} catch (Exception e) {
			  Log.getLogger().error(e.getMessage(),e);  
		      return new Json(500,null,null);
		}
	}
	//督查事项跳转
	@RequestMapping(value="/saveanncelse",method=RequestMethod.GET)
	public ModelAndView saveanncelse(@Param("id")int id,HttpServletRequest request) {
		ModelAndView mv=new ModelAndView();
		Map<String,String> supervisor=new HashMap<String,String>();
		List<Dept> dept=deptService.selectname(null);
		if(dept!=null&&dept.size()!=0){
			for(int i=0;i<dept.size();i++){
				Dept d=dept.get(i);
				if(d.getDepartmentname().equals("集团本部")||d.getDepartmentname().equals("子公司")||d.getDepartmentname().equals("未设置"))dept.remove(i);
				supervisor.put(String.valueOf(d.getId()), d.getLeadershipname());
			}
		}
		
		mv.addObject("supervisor",JSONObject.fromObject(supervisor));
		mv.addObject("leadership", userService.headdid());
		mv.addObject("dept", dept);
		mv.addObject("annc",announcementService.selectByPrimaryKey(id));

		mv.setViewName("inspector/createred");
		return mv;
	}
	/**
	 * 公告撤回，不删除信息改变state在查询时隐藏
	 */
	@RequestMapping(value="/Anncdelect",method=RequestMethod.POST)
	@ResponseBody
	public Json delect(@Param ("id") int id,String invitation){
		try{
		Announcement announcement=announcementService.selectByPrimaryKey(id);
		
		if(announcement!=null){
			announcementService.deleteAnnc(id,1,invitation);
			announcementStateService.deleteAnncState(announcement.getId());
		    List<Schedule> schedule=scheduleService.selectaid(announcement.getId());

		    if(announcement.getState()==true){
		   

		    List<Schedule> sche=new ArrayList<Schedule>();

		    //删除日程副表
		    List<ScheduleRemind> scheduleRemind=new ArrayList<ScheduleRemind>();
			for(int i=0;i<schedule.size();i++){
				ScheduleRemind sc=new ScheduleRemind();
				Schedule ss=new Schedule();
				sc.setSid(schedule.get(i).getSid());
				scheduleRemind.add(sc);
				ss.setAid(schedule.get(i).getAid());
				sche.add(ss);
			}
			
			return new Json(200,"撤回成功",null);
		    }else{
		    	return new Json(200,"撤回成功",null);
		    }
		}else{
		return new Json(201,"撤回失败",null);
		}
		}catch(Exception e){
			 Log.getLogger().error(e.getMessage(),e);  
		      return new Json(500,null,null);
		}
		}
	/*
	 * 公告详情
	 */
	@RequestMapping("particulars")
	@ResponseBody
	public ModelAndView particulars(Integer id,HttpServletRequest request){
		ModelAndView mv=new ModelAndView();
		Announcement announcement =announcementService.selectByPrimaryKey(id);
		User user=(User)request.getSession().getAttribute("user");
		if(announcement!=null){
			mv.addObject("announcement", announcement);
			mv.addObject("files", attachmentsService.display(new Attachments(2,announcement.getId())));
			mv.addObject("aid",id);
			if(announcement.getType().equals("2")){
				if(announcement.getState()==true){
					if(user.getUid()==announcement.getUid()){
						mv.addObject("all",announcementStateService.selectall(id));
						mv.addObject("state",announcementStateService.select(id, user.getUid()));
					}else{
						mv.addObject("state",announcementStateService.select(id, user.getUid()));
					}
					}
			}
			mv.setViewName("Annc/particulars");
			return mv;
		}else{
		return mv;
		}
	}	
		
/**
 *  可查看人员多项选择树
 */
@RequestMapping("assistUserTree")
@ResponseBody
	public List<AssistDeptTree> assistUserTree(HttpServletRequest request){
		//实例化AssistDeptTree类型的集合
		List<AssistDeptTree> tree=new ArrayList<AssistDeptTree>();
		//Dept类型的集合用来存储部门信息
		List<Dept> depts=deptService.selectall();
		//如果不为空执行以下条件
		if(depts!=null&&depts.size()!=0){
			//for循环取出部门信息
			for(int i=0;i<depts.size();i++){
				AssistDeptTree adt=new AssistDeptTree();
			//将集合里的元素取出来放进类
				Dept topDept=depts.get(i);
				//从类里取出id和name属性放进AssistDeptTree类中,现在只是父信息
				adt.setId(topDept.getId());
				adt.setText(topDept.getDepartmentname());
				//判断如果子不为空，调用Depts方法，并传递属性
			  if(topDept.getUser()!=null&&topDept.getUser().size()!=0){
				adt.setChildren(Users(topDept.getUser()));
				tree.add(adt);
			}else{
				tree.add(adt);
			}
			}
		}
		 	return tree;
	}


	public List<AssistDeptTree> Users(List<User> users){
		List<AssistDeptTree> tree=new ArrayList<AssistDeptTree>();
		if(users!=null&&users.size()!=0){
		for(int i=0;i<users.size();i++){
			AssistDeptTree adt=new AssistDeptTree();
			User topUser=users.get(i);
			adt.setId(topUser.getUid());
			adt.setText(topUser.getName());
			tree.add(adt);
	}
	}
	return tree;
	}
/**
 * 文件上传
 */
@RequestMapping("uploadAnncFile")  
@ApiIgnore
@ResponseBody  
public void uploadPic(@RequestParam(value = "file", required = false) MultipartFile file,
		 HttpServletRequest request,HttpServletResponse response) throws Exception {  
	 try {
		
		 response.setHeader("Content-Type", "text/html;charset=UTF-8");
		 PrintWriter writer = response.getWriter();
		 String path = request.getSession().getServletContext().getRealPath("/");
	     path=path.substring(0, path.indexOf("webapps"));
	     String fileName = file.getOriginalFilename(); 
	     String fileNameStr = (new Date().getTime())+"__"+fileName; 
	     File targetFile = new File(path+"webapps/AnncImgs/files", fileNameStr);  
	     if(!targetFile.exists()){  
	         targetFile.mkdirs();
	     }  
	         file.transferTo(targetFile);
	        writer.print("AnncImgs/files/"+fileNameStr);
	     	writer.flush();
	     	writer.close();
	} catch (Exception e) {
		Log.getLogger().error(e.getMessage(), e);
	}
}  





@RequestMapping("AnncList")
@ResponseBody
public DataGrid anncList(@RequestParam(value = "filterRules", required = false) String filterRules,
		@RequestParam(value = "sort", required = false) String sort,
		@RequestParam(value = "order", required = false) String order,
		@RequestParam(value="page",required=false) Integer page,
		@RequestParam(value="rows",required=false) Integer rows,HttpServletRequest request){
	try {
		
		List<FilterRules> frs = new ArrayList<FilterRules>();
		if (filterRules != null) {
			JSONArray json = JSONArray.fromObject(filterRules);
			if (json.size() > 0) {
				for (int i = 0; i < json.size(); i++) {
					JSONObject job = json.getJSONObject(i);
					frs.add(new FilterRules((String) job.get("field"),
							(String) job.get("op"), (String) job.get("value")));
				}
			}
		}
		Announcement announcement =new Announcement();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		for (int i = 0; i < frs.size(); i++){
			FilterRules fr = frs.get(i);
				if (fr.getField().equals("id"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setId(Integer.parseInt(fr.getValue()));
				if (fr.getField().equals("type"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setType(fr.getValue());
				if (fr.getField().equals("remove"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						
						announcement.setRemove(Integer.parseInt(fr.getValue()));
				if (fr.getField().equals("accomplish"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setAccomplish(Integer.parseInt(fr.getValue()));
				if (fr.getField().equals("title"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setTitle(fr.getValue());
				if (fr.getField().equals("createBy"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setCreateBy(fr.getValue());
				if (fr.getField().equals("date"))
					if (fr.getValue() != null && !fr.getValue().equals(""))
						announcement.setDate(sdf.parse(fr.getValue()));
		}
		if (sort != null) {
			String[] newsort = sort.split(",");
			String[] neworder = order.split(",");
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < newsort.length; i++) {
				if (i == 0)
					sb.append(" order by ");
				if (newsort[i].equals("type"))
					newsort[i] = "type";
				if (newsort[i].equals("remove"))
					newsort[i] = "remove";
				if (newsort[i].equals("accomplish"))
					newsort[i] = "accomplish";
				if (newsort[i].equals("title"))
					newsort[i] = "title";
				if (newsort[i].equals("createBy"))
					newsort[i] = "createBy";
				if (newsort[i].equals("date")){
					newsort[i] = "date";
					if (i == 0)
						sb.append("annc." + newsort[i] + " " + neworder[i]);
					else
						sb.append(",annc." + newsort[i] + " " + neworder[i]);
				}
			}
			announcement.setOrderby(sb.toString());
			}else
				announcement.setOrderby("order by annc.start_time desc");
		DataGrid datagrid=DataGrid.init();
		User user=(User) request.getSession().getAttribute("user");
		//如果是督查员身份，那么可以查看全部公文
		
		Integer iid=null;
		if(user.getRid()==1){
		announcement.setIid(iid);
		}
		else if(user.getRid()!=1){
			iid=user.getUid();
		announcement.setIid(iid);
		if(announcement.getRemove()==null){
		announcement.setRemove(0);
		}
		announcement.setUid(user.getUid());
		}	
		
		PagedResult<Announcement> pagedResult=announcementService.select(announcement,page,rows);
			 datagrid.setTotal(pagedResult.getTotal());
			 datagrid.setRows(pagedResult.getDataList());
		 	return datagrid;
	} catch (Exception e) {
		Log.getLogger().error(e.getMessage(), e);	
		return null;
	}
}
	/*
	 * 个人待办
	 */
	@RequestMapping("/accomplish")
	@ResponseBody
	public DataGrid accomplish(@RequestParam(value="page",required=false) Integer page,
		@RequestParam(value="rows",required=false) Integer rows,
		@RequestParam(value="did",required=false) Integer did,HttpServletRequest request){
		DataGrid datagrid=new DataGrid();
		User user =(User)request.getSession().getAttribute("user");
	 PagedResult<Announcement> pagedResult=announcementService.selectaccomplish(user.getUid(),page,rows);
	 if(pagedResult.getDataList()!=null&&pagedResult.getDataList().size()!=0){
		 datagrid.setTotal(pagedResult.getTotal());
		 datagrid.setRows(pagedResult.getDataList());
	 }
	 	return datagrid;
}
	/*
	 * 变成办件完成状态
	 */
	@RequestMapping("updateanncstate")
	@ResponseBody
	public Json updateanncstate(@Param("id")int id,@Param("remarks")String remarks,HttpServletRequest request){
	try{	
		User user=(User)request.getSession().getAttribute("user");
		AnnouncementState announcementState=new AnnouncementState();
		announcementState.setAid(id);
		announcementState.setUid(user.getUid());
		announcementState.setState(1);
		announcementState.setRemarks(remarks);
		int a=announcementStateService.updatestate(announcementState);
		
		if(a==1){
		List<AnnouncementState> announcementState1=announcementStateService.selectanncsize(id);
		List<AnnouncementState> announcementState2=announcementStateService.selectstatesize(id);
		if(announcementState1.size()==announcementState2.size()){
			Announcement announcement=new Announcement();
			announcement.setId(id);
			announcement.setAccomplish(1);
			
			announcementService.updateAnnc(announcement);
		}
		return new Json(200,"状态变更完成",null);
		}else{
			return new Json(201,"请重试！",null);
		}
	}catch(Exception e){
		 Log.getLogger().error(e.getMessage(),e);  
	      return new Json(500,null,null);
	}
		
	}
	
	@RequestMapping(value="creatleaveamessage",method=RequestMethod.POST)
	@ResponseBody
	public Json creatleaveamessage( @RequestParam("aid") Integer aid,HttpServletRequest request){
		try{
			String body ="";
			User user=(User)request.getSession().getAttribute("user");
			Announcement announcement=announcementService.selectByPrimaryKey(aid);
			if(announcement.getType().equals("1"))body="协同";
			if(announcement.getType().equals("2"))body="金宏转办";
			if(announcement.getType().equals("3"))body="集团红头";
			Integer messageid=messagesService.create(
					new Messages(user.getName()+"建立了标题为"+announcement.getTitle()+"的"+body+"文件",4,aid));
			if(messageid!=0){
				List<MessageRemind> mrs=new ArrayList<MessageRemind>();
				Date date=new Date();
				 String []aann=announcement.getRange().split(",");
				 for(int i=0;i<aann.length;i++){
						MessageRemind mr=new MessageRemind();
						mr.setMid(messageid);
						mr.setState(0);
						mr.setUid(Integer.parseInt(aann[i]));
						mr.setReadingTime(date);
						mrs.add(mr);
				 }
						//同时推送模板消息
				if(messageRemindService.creates(mrs)!=0){
					return new Json(200,"操作成功！",null);
				}else return new Json(201,"操作失败！",null);
			}
			else return new Json(201,"操作失败！",null);
			
			
		}catch(Exception e){
			 Log.getLogger().error(e.getMessage(),e);  
		      return new Json(500,null,null);
		}
	}
	
	@RequestMapping(value="updatereadstate",method=RequestMethod.POST)
	@ResponseBody
	public Json updatereadstate(@Param("id")int id,HttpServletRequest request){
		try{
			
			AnnouncementState announcementState=new AnnouncementState();
			User user=(User)request.getSession().getAttribute("user");
			announcementState.setAid(id);
			announcementState.setReadstate(1);
			announcementState.setUid(user.getUid());
			if(announcementStateService.updatereadstate(announcementState)==1){
			return new Json(200,"操作成功！",null);
			}else return new Json(201,"操作失败！",null);
				
		}catch(Exception e){
			 Log.getLogger().error(e.getMessage(),e);  
		      return new Json(500,null,null);
		}
		
	}
	
}

